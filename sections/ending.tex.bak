\section{PODSUMOWANIE}

Celem pracy było opracowanie i implementacja systemu headless CMS z dodatkową
możliwością modelowania warstwy danych przy pomocy natywnych zapytań SQL.
Motywacją pracy była, zaprezentowana w rozdziale 2, tendencja dostępnych na
rynku systemów CMS do ograniczania możliwości administratora. Możliwość pisania
natywnych zapytań SQL miała na celu umożliwienie administratorom korzystania ze
wszystkich funkcji bazy danych.

Udało się zrealizować wszystkie założenia systemu. Przygotowany system powala na
wygodne pisanie, testowanie i wykonywanie zapytań SQL wysyłanych bezpośrednio do
bazy danych. Dodatkowo, zaimplementowano edytor punktów końcowych pozwalający na
wykonywanie dowolnej ilości zapytań SQL przy przychodzącym zapytaniu HTTP i
modelowaniu struktury dokumentu JSON odsyłanego w odpowiedzi. Drzewo zapytań SQL
można łatwo testować przed publikacją punktu końcowego. Możliwość wykonywania
punktów końcowych można ograniczyć do wybranych grup użytkowników, których
kontami wygodnie zarządza się w przygotowanych komponentach panelu
administratora. Dodatkowo, zaimplementowano podstawowe funkcje typowego systemu
CMS umożliwiające tworzenie tabel i zarządanie danymi bez potrzeby pisania kodu
SQL.

%Według aplikacji GNOME System Monitor, aplikacja backend w stanie spoczynku
%używa 1.9MB pamięci RAM.

Poprawne działanie aplikacji zostało zweryfikowane za pomocą testów
jednostkowych, integracyjnych i manualnych. Tym samym można uznać, że cel pracy
został osiągnięty.

\medspace

Aplikację można rozwinąć implementując możliwość zmiany struktury tabel za
pomocą formularza. Niewygodne jest również dodawanie kluczy obcych, które wymaga
pamiętania nazwy tabeli, do której chce się odnieść oraz nazwy kolumny
przechowującej klucze główne.

Funkcją dostępną w typowych systemach CMS, której zupełnie brakuje w programie
jest zarządzanie mediami. Należałoby się zastanowić, jak połączyć system,
którego głównym sposobem zarządzania jest pisanie natywnych zapytań SQL z
systemem zarządzania mediami.

Można użyć do tego celu jednego z typów danych bazy Postgres przeznaczonego do
przechowywania danych binarnych. Popularnym rozwiązaniem jest przechowywanie
danych binarnych w systemie plików i przechowywanie nazwy pliku w bazie danych.
Takie rozwiązanie utrudniłoby jednak administratorom zarządzanie danymi. W celu
ustalenia optymalnego rozwiązania problemu, wymagane są dalsze badania.

Kolejną funkcją, jaką warto w przyszłości zaimplementować jest udostępnienie
użytkownikom nie będącym administratorami okrojonego panelu administratora.
Można by użyć do tego komponentów z panelu administratora, lub stworzyć
niezależny panel, który zawiera interfejs przeznaczony do wywoływania punktów
końcowych przygotowanych przez administratorów. Zaimplementowanie obydwu
pomysłów stworzyłoby interfejs nie gorszy, niż w innych popularnych systemach
CMS.

Kolejną funkcją, jaką warto w przyszłości zaimplementować jest zwracanie danych
przy wywołaniu punktu końcowego nie jako dokument json, lecz jako szablon HTML
wypełniony danymi wynikowymi. Taka funkcja byłaby prosta w implementacji.
Najtrudniejszą częścią implementacji byłoby przygotowanie interfejsu zarządzania
szablonami w panelu administratora.

\medspace

Literatura dotycząca systemów CMS jest dość uboga. Większość dostępnych książek
skupia się na profesjonalnych systemach CMS, z których korzystają firmy
publikujące treści multimedialne. Książki opisujące systemy CMS przystosowane do
mniejszych stron internetowych zazwyczaj skupiają się na konkretnym systemie i
nie poruszają ogólnych zagadnień dotyczących systemów zarządzania treścią.

Jeśli chodzi o systemy headless CMS, literatura jest jeszcze bardziej uboga. Z
tego powodu, jeśli omawiane były systemy headless CMS, praca cytowała głównie
strony internetowe.
